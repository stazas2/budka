const { loadConfig } = require("./configLoader")
let config = loadConfig()

function createDateFolders() {
  try {
    const dateFolder = path.join(
      baseDir,
      new Date().toISOString().slice(0, 10).replace(/-/g, "_")
    )
    const inputDir = path.join(dateFolder, "input")
    const outputDir = path.join(dateFolder, "output")
    ;[baseDir, dateFolder, inputDir, outputDir].forEach((dir) => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true })
      }
    })
    return { inputDir, outputDir }
  } catch (error) {
    console.error("Error in createDateFolders:", error)
    throw error
  }
}

function generateFileName() {
  try {
    const date = new Date()
    const timeString = `${date.getHours()}_${date.getMinutes()}_${date.getSeconds()}`
    const randomString = Math.random().toString(36).substring(2, 6)
    return `${timeString}_${randomString}.jpg`
  } catch (error) {
    console.error("Error in generateFileName:", error)
    throw error
  }
}

async function saveImageWithUtils(folderType, urlImage) {
  try {
    const { inputDir, outputDir } = createDateFolders();
    const folderPath = folderType === "input" ? inputDir : outputDir;
    const fileName = generateFileName();
    const filePath = path.join(folderPath, fileName);

    if (folderType === "input") {
      const imageData = urlImage.replace(/^data:image\/\w+;base64,/, "");
      fs.writeFileSync(filePath, imageData, "base64");
      console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (input):", filePath);
    } else if (folderType === "output") {
      if (/^https?:\/\//.test(urlImage)) {
        try {
          const response = await fetch(urlImage);
          if (!response.ok) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${response.statusText}`);
          }
          const buffer = await response.arrayBuffer();
          fs.writeFileSync(filePath, Buffer.from(buffer));
          console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (output, URL):", filePath);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
          throw error;
        }
      } else {
        const imageData = urlImage.replace(/^data:image\/\w+;base64,/, "");
        fs.writeFileSync(filePath, imageData, "base64");
        console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (output, base64):", filePath);
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ saveImage (${folderType}):`, error);
    throw error;
  }
}

async function copyPhotoToDateFolder(imagesFolder, filepath) {
  try {
    // –ë–µ—Ä—ë–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏ –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç-—è
    const filename = filepath.split("\\")[2]
    const filePath = path.join(imagesFolder, filename);
    const { inputDir } = createDateFolders();

    // console.log(`üìÇ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${filePath}`);
    // console.log(`üìÅ –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${inputDir}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try {
      await fs.promises.access(filePath);
    } catch (err) {
      console.error(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      return null;
    }

    // üóÇ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.promises.mkdir(inputDir, { recursive: true });

    // üè∑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const newFileName = generateFileName();
    const targetPath = path.join(inputDir, newFileName);

    // üéØ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
    await fs.promises.copyFile(filePath, targetPath);
    console.log(`‚úÖ –§–æ—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${targetPath}`);

    return targetPath; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: ${error.message}`);
    return null;
  }
}

module.exports = { saveImageWithUtils, copyPhotoToDateFolder }
